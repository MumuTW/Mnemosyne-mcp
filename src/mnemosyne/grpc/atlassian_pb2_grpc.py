# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from . import atlassian_pb2 as atlassian__pb2

GRPC_GENERATED_VERSION = "1.73.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in atlassian_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class AtlassianKnowledgeExtractorStub(object):
    """===================================================================
    Atlassian 知識提取服務定義 (Atlassian Knowledge Extraction Service)
    ===================================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExtractJiraIssues = channel.unary_unary(
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/ExtractJiraIssues",
            request_serializer=atlassian__pb2.ExtractJiraIssuesRequest.SerializeToString,
            response_deserializer=atlassian__pb2.ExtractJiraIssuesResponse.FromString,
            _registered_method=True,
        )
        self.ExtractConfluencePages = channel.unary_unary(
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/ExtractConfluencePages",
            request_serializer=atlassian__pb2.ExtractConfluencePagesRequest.SerializeToString,
            response_deserializer=atlassian__pb2.ExtractConfluencePagesResponse.FromString,
            _registered_method=True,
        )
        self.ExtractSingleIssue = channel.unary_unary(
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/ExtractSingleIssue",
            request_serializer=atlassian__pb2.ExtractSingleIssueRequest.SerializeToString,
            response_deserializer=atlassian__pb2.ExtractSingleIssueResponse.FromString,
            _registered_method=True,
        )
        self.CheckHealth = channel.unary_unary(
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/CheckHealth",
            request_serializer=atlassian__pb2.HealthCheckRequest.SerializeToString,
            response_deserializer=atlassian__pb2.HealthCheckResponse.FromString,
            _registered_method=True,
        )
        self.BatchExtractEntities = channel.unary_unary(
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/BatchExtractEntities",
            request_serializer=atlassian__pb2.BatchExtractEntitiesRequest.SerializeToString,
            response_deserializer=atlassian__pb2.BatchExtractEntitiesResponse.FromString,
            _registered_method=True,
        )
        self.GetExtractionStats = channel.unary_unary(
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/GetExtractionStats",
            request_serializer=atlassian__pb2.GetExtractionStatsRequest.SerializeToString,
            response_deserializer=atlassian__pb2.ExtractionStatsResponse.FromString,
            _registered_method=True,
        )


class AtlassianKnowledgeExtractorServicer(object):
    """===================================================================
    Atlassian 知識提取服務定義 (Atlassian Knowledge Extraction Service)
    ===================================================================
    """

    def ExtractJiraIssues(self, request, context):
        """--- 數據提取 (Data Extraction) ---"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ExtractConfluencePages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ExtractSingleIssue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CheckHealth(self, request, context):
        """--- 健康檢查 (Health Check) ---"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchExtractEntities(self, request, context):
        """--- 批量處理 (Batch Processing) ---"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetExtractionStats(self, request, context):
        """--- 統計與監控 (Statistics & Monitoring) ---"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AtlassianKnowledgeExtractorServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ExtractJiraIssues": grpc.unary_unary_rpc_method_handler(
            servicer.ExtractJiraIssues,
            request_deserializer=atlassian__pb2.ExtractJiraIssuesRequest.FromString,
            response_serializer=atlassian__pb2.ExtractJiraIssuesResponse.SerializeToString,
        ),
        "ExtractConfluencePages": grpc.unary_unary_rpc_method_handler(
            servicer.ExtractConfluencePages,
            request_deserializer=atlassian__pb2.ExtractConfluencePagesRequest.FromString,
            response_serializer=atlassian__pb2.ExtractConfluencePagesResponse.SerializeToString,
        ),
        "ExtractSingleIssue": grpc.unary_unary_rpc_method_handler(
            servicer.ExtractSingleIssue,
            request_deserializer=atlassian__pb2.ExtractSingleIssueRequest.FromString,
            response_serializer=atlassian__pb2.ExtractSingleIssueResponse.SerializeToString,
        ),
        "CheckHealth": grpc.unary_unary_rpc_method_handler(
            servicer.CheckHealth,
            request_deserializer=atlassian__pb2.HealthCheckRequest.FromString,
            response_serializer=atlassian__pb2.HealthCheckResponse.SerializeToString,
        ),
        "BatchExtractEntities": grpc.unary_unary_rpc_method_handler(
            servicer.BatchExtractEntities,
            request_deserializer=atlassian__pb2.BatchExtractEntitiesRequest.FromString,
            response_serializer=atlassian__pb2.BatchExtractEntitiesResponse.SerializeToString,
        ),
        "GetExtractionStats": grpc.unary_unary_rpc_method_handler(
            servicer.GetExtractionStats,
            request_deserializer=atlassian__pb2.GetExtractionStatsRequest.FromString,
            response_serializer=atlassian__pb2.ExtractionStatsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class AtlassianKnowledgeExtractor(object):
    """===================================================================
    Atlassian 知識提取服務定義 (Atlassian Knowledge Extraction Service)
    ===================================================================
    """

    @staticmethod
    def ExtractJiraIssues(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/ExtractJiraIssues",
            atlassian__pb2.ExtractJiraIssuesRequest.SerializeToString,
            atlassian__pb2.ExtractJiraIssuesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ExtractConfluencePages(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/ExtractConfluencePages",
            atlassian__pb2.ExtractConfluencePagesRequest.SerializeToString,
            atlassian__pb2.ExtractConfluencePagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ExtractSingleIssue(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/ExtractSingleIssue",
            atlassian__pb2.ExtractSingleIssueRequest.SerializeToString,
            atlassian__pb2.ExtractSingleIssueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CheckHealth(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/CheckHealth",
            atlassian__pb2.HealthCheckRequest.SerializeToString,
            atlassian__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def BatchExtractEntities(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/BatchExtractEntities",
            atlassian__pb2.BatchExtractEntitiesRequest.SerializeToString,
            atlassian__pb2.BatchExtractEntitiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetExtractionStats(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mnemosyne.atlassian.v1.AtlassianKnowledgeExtractor/GetExtractionStats",
            atlassian__pb2.GetExtractionStatsRequest.SerializeToString,
            atlassian__pb2.ExtractionStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
